from collections import Counter
from functools import reduce
from itertools import accumulate

from data_science.text_processor import Text_processor


def get_paragraph_sources(text: str, words_ids: list[int], source_urls: list[str],
                          source_words_ids=list[list[int]]):
    paragraphs = text.split('\n')
    text_processor = Text_processor()
    paragraphs_processed_num_words = [len(process_text(paragraph, text_processor).split()) for paragraph in paragraphs]
    num_words = sum(paragraphs_processed_num_words)
    partial_ratios = [paragraph_length / num_words for paragraph_length in
                      paragraphs_processed_num_words]
    paragraphs_ratios = [0] + list(accumulate(partial_ratios, lambda x, y: x + y))
    num_words_ids = len(words_ids)
    paragraphs_words_ids = [words_ids[int(paragraphs_ratios[i] * num_words_ids):
                                      int(paragraphs_ratios[i + 1] * num_words_ids)] for i in
                            range(len(paragraphs_ratios) - 1)]
    sources = [
        [source_urls[i] for i, source_words_id in enumerate(source_words_ids) if if_paragraph_word_ids_in_text_word_ids(paragraph_ids, source_words_id)]
        for paragraph_ids in paragraphs_words_ids]

    earliest_sources = list(map(lambda x: get_earliest_url(x), sources))
    result = check_only_source(earliest_sources)
    if result:
        return [(text, result)]
    else:
        return list(zip(paragraphs, earliest_sources))


def process_text(text, text_processor):
    return text_processor.stopword(text_processor.lemmatizer(text_processor.regexp_preprocess(text)))


def if_paragraph_word_ids_in_text_word_ids(paragraph: list[int], text: list[int], threshold=0.2):
    len_intersection = len(set(paragraph).intersection(text))
    return len_intersection / len(paragraph) > threshold

def check_only_source(urls_list: list[str]):
    filtered_urls = list(filter(lambda x: x is not None, urls_list))
    filtered_urls_counter = dict(Counter(filtered_urls))
    most_often_url, number_occurances = sorted(filtered_urls_counter.items(), key=lambda item: item[1])[-1]
    if number_occurances/len(filtered_urls) > 0.8:
        return most_often_url
    else:
        return False

#TO-DO
def get_earliest_url(source_urls_list: list[str]):
    """

    :param source_urls_list: List of urls-sources related to paragraph (can be empty)
    :return: url - the earliest source among given list (if empty -> return None).
    """
    if len(source_urls_list) == 0:
        return None
    else:

        return source_urls_list[0]


text = "Ученым в Якутской области Сибири удалось извлечь образцы жидкой крови из жеребенка, которому 42 000 лет, который был найден в вечной мерзлоте в 2018 году. Ученые надеются собрать жизнеспособные клетки с целью клонирования вымерших видов лошадь.\n" \
       "Мужской жеребенок был обнаружен в Батагайке 11 августа 2018 года. Вечная мерзлота оставила останки в удивительно хорошем состоянии, что вселяло надежду на то, что их клетки могут быть извлечены. Предполагается, что этот экземпляр принадлежит к вымершему виду лошадей, известному как Ленская порода (также известная как Ленская лошадь), как сообщалось в прошлом году в «Сибирских временах».\n" \
       "Сотрудничество между Северо-Восточным федеральным университетом в Якутске и Южнокорейским исследовательским фондом Sooam Biotech в настоящее время анализирует останки с явным намерением клонировать доисторическую лошадь. Для этого, однако, исследователи должны были бы извлечь и вырастить жизнеспособные соматические клетки - то, чего они еще не смогли сделать. Более 20 попыток вырастить клетки из ткани животного потерпели неудачу. Детальный анализ лошади начался в прошлом месяце, и ожидается, что работа продлится до конца апреля.\n" \
       "Как сообщало «Сибирское время» ранее сегодня, исследователям теперь удалось извлечь образцы жидкой крови из сосудов сердца, которые были хорошо сохранены благодаря благоприятным условиям захоронения и вечной мерзлоте, согласно Семену Григорьеву, главе Музея Мамонта СВФУ в Якутске. Не ясно, можно ли вырастить жизнеспособные клетки из образца крови.\n" \
       "В интервью российскому информационному агентству ТАСС, переданном «Сибирским временам», Григорьев сказал, что вскрытие показало «прекрасно сохранившиеся органы» и мышечные ткани, сохранившие свой «естественный красноватый цвет». Кроме того, жеребенок все еще демонстрирует волосы на его голова, ноги и части его тела. «Сохранение волос - это еще одна научная сенсация, так как все предыдущие древние лошади были найдены без волос», - сказал Григорьев. Когда он был жив, животное имело бухтовую окраску с черным хвостом и гривой.\n" \
       "Еще в 2013 году российские ученые обнаружили жидкую кровь в останках 15 000-летнего шерстистого мамонта. Кровь, извлеченная из жеребенка, старше 27 000 лет.\n" \
       "«Наши исследования показали, что в момент смерти жеребенку было от одной до двух недель, поэтому он родился совсем недавно», - сказал Григорьев. «Как и в предыдущих случаях действительно хорошо сохранившихся останков доисторических животных, причиной смерти было утопление в грязи, которая замерзла и превратилась в вечную мерзлоту. Много грязи и ила, которые жеребенок проглотил в последние секунды своей жизни, было найдено в желудочно-кишечном тракте».\n" \
       "Еще в 2013 году российские ученые обнаружили жидкую кровь в останках 15 000-летнего шерстистого мамонта. Кровь, извлеченная из жеребенка, старше 27 000 лет.\n" \
       "Как уже отмечалось, основной целью этого сотрудничества между СВФУ и Sooam Biotech является возрождение этого животного с помощью процессов клонирования (кроме того, Sooam Biotech занимается клонированием домашних собак в Южной Корее, а его ведущим исследователем является Хванг). Ву Сук, спорный генетик, обвиняемый в нескольких вопиющих нарушениях этики в 2000-х годах. По-видимому, работа «настолько продвинута», что команда ищет суррогатную кобылу «для исторической роли рождения возвращающихся видов», сообщает «Сибирская газета».\n" \
       "Очевидно, что существуют некоторые серьезные этические и технологические проблемы, которые необходимо решить. Возрождение видов является спорным по ряду причин, включая снижение качества жизни клона (что будет подвергаться экспериментам в течение всей его жизни), проблему генетического разнообразия и инбридинга, а также отсутствие среды обитания ледникового периода для хозяина возрожденный вид, среди других ограничений.\n" \
       "Российско-корейское сотрудничество также пытается клонировать шерстистого мамонта, и исследования, полученные из исследования жеребят, могут быть использованы в качестве основы для этого ожидаемого эксперимента. Воскрешение вымершего вида, нравится нам это или нет, может произойти раньше, чем мы думаем."

urls = ["http://malitikov.ru/izvlechennaya-krov-iz-42-000-letnego-zherebenka-najdennogo-zamorozhennym-v-sibiri/",
        "https://ru.frosthead.com/scientists-extracted-liquid-blood-from-42",
        "https://naked-science.ru/article/biology/uchenye-soobshchili-o-planah-po",
        "https://pressa.tv/foto/91732-chto-obnaruzheno-v-tele-zherebenka-sohranivshegosya-v-vechnoy-merzlote.html",
        "https://Science-Pop.ru/31907",
        "https://zen.yandex.ru/media/id/5c8ed614d4eea800b27490ae/uchenye-izvlekli-krov-iz-jerebenka-kotoromu-uje-okolo-42-000-let-5cbb319872ca0a00b26c8d3c",
        "https://vk.com/wall-161034399_20228", "https://nauka.tass.ru/nauka/6815925", "https://naukatv.ru/news/25210",
        "https://nplus1.ru/news/2019/04/16/liquid-old-blood", "https://new-science.ru/tag/mamont/"]

ids_str = [


    "5 6 7 8 9 10 19 20 21 22 23 24 32 33 34 35 37 43 44 45 49 50 54 57 58 59 70 71 72 73 85 86 87 88 93 94 95 96 99 100 101 103 104 145 146 147 149 150 151 152 156 158 159 160 169 170 171 172 173 174 175 176 185 186 187 189 192 193 204 205 206 221 222 223 224 225 226 229 230 231 241 242 243 253 254 255 257 258 259 315 316 317 318 319 320 321 322 323 325 326 327 328 329 338 339 340 341 343 344 345 348 349 350 351",
    "7 8 9 10 11 13 14 15 17 18 19 20 21 22 33 34 35 37 38 39 40 46 47 49 50 71 72 73 74 75 76 79 80 81 82 83 85 86 87 88 89 90 171 172 173 174 175 176 181 182 183 184 185 186 187 189 191 192 193 195 196 201 202 203 206 207 208 216 217 218 219 221 222 223 224 225 226 228 229 230 231 239 240 245 246 310 313 315 316 317 321 322 323 325 326 327 328 329 330 331 332 334 335 336 337 338 340 341 343 344 345",
    "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 23 24 25 26 27 28 29 31 32 33 34 35 36 37 41 42 43 44 45 46 47 247 248 249 250 251 252 253 254 255 256 257 258 259 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 295 296 297 303 304 305 306 307 308 309 310 311 316 317 318 329 336",
    "9 10 11 12 13 14 15 18 19 20 21 22 23 24 33 34 35 38 39 40 43 44 45 69 70 71 72 73 74 75 76 77 79 80 81 82 83 87 88 93 94 95 96 97 98 99 100 101 102 103 104 279 280 281 282 283 284 285 286 287 288 289 290 291 292 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 325 326 328",
    "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 59 71 72 73 82 87 88 313 317 321 322 323 329 336 337 338 345 347 354 355 358 359 360 361 364 365",
    "171 172 173 174 175 176 181 182 183 184 185 186 187 189 192 193 194 218 219 220 224 225 226 228 230 231 241 242 243 244 315 316 317 319 320 321 322 323 324 325 326 327 328 329 336 337 338 348 349 350 351",
    "13 14 15 19 20 21 22 33 34 35 38 46 47 55 56 57 173 174 175 176 181 182 183 184 185 186 187 193 203 204 205 206 219 220 221 222 223 224 225 226 228 229 230 231",
    "171 172 173 174 175 176 181 182 183 184 185 189 192 193 194 195 315 316 317 318 319 325 326 327 328 329 331 332 335 338 339 340 341 348 349 350 351 358 360 361",
    "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19"
]

ids_int = [list(map(lambda x: int(x), id_str.split(" "))) for id_str in ids_str]

result = get_paragraph_sources(text, list(range(0, 525)), source_urls=urls,
                      source_words_ids=ids_int)
print(result)